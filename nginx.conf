
user  root;
worker_processes  auto;
worker_rlimit_nofile 8192;

error_log  logs/error.log warn;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  8000;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
pagespeed ForceCaching on;
    sendfile        on;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  20;


    gzip  on;
    gzip_comp_level 9;
gzip_min_length 256;
gzip_proxied any;
gzip_vary on;
gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	pagespeed on;


pagespeed EnableFilters prioritize_critical_css;
pagespeed EnableFilters defer_javascript;


pagespeed EnableFilters collapse_whitespace,remove_comments;
	# Needs to exist and be writable by nginx.  Use tmpfs for best performance.
	pagespeed FileCachePath /var/ngx_pagespeed_cache;
	pagespeed DisableRewriteOnNoTransform off;
	pagespeed LowercaseHtmlNames on;
	pagespeed ModifyCachingHeaders off;
	pagespeed XHeaderValue "Powered By ngx_pagespeed";
	pagespeed PreserveUrlRelativity on;

	########################################################################
	### Nginx App Pagespeed Optimize Images filter
	########################################################################
	
	## Configuration
	## The 'Optimize Images' filter stage comprises three filter passes. It is easiest to enable image rewriting by specifying:
	pagespeed EnableFilters rewrite_images;
	pagespeed EnableFilters inline_images;
	pagespeed EnableFilters recompress_images;
  
	## Convert GIFs to PNG
	pagespeed EnableFilters convert_gif_to_png;
  
	## Convert JPEG to Progressive
	pagespeed EnableFilters convert_jpeg_to_progressive;
  
	## Recompress JPEGs
	pagespeed EnableFilters recompress_jpeg;

	## Recompress PNGs
	pagespeed EnableFilters recompress_png;

	## Recompress WEBPs
	pagespeed EnableFilters recompress_webp;
  
	## Strip Image Color Profile
	pagespeed EnableFilters strip_image_color_profile;
  
	## Strip Image Meta Data
	pagespeed EnableFilters strip_image_meta_data;            #This filter strips EXIF meta data from images.
  
	## Reduce JPEG Subsampling
	pagespeed EnableFilters jpeg_subsampling;                 #This filter reduces the color sampling of jpeg images to 4:2:0. Human vision is much more sensitive to changes in brightness than changes in hue or saturation, and 4:2:0 color sampling allows us to keep brightness data while reducing the amount of hue and saturation data by 3/4. This can significantly reduce the image size while having only a small effect on perception.
  
	## Convert PNG to JPEG
	pagespeed EnableFilters convert_png_to_jpeg;             #Enabling convert_png_to_jpeg causes a rewritten gif or png image to be converted to a jpeg so long as it does not have an alpha channel or transparent pixels. The conversion is lossy, but the resulting jpeg is generally substantially smaller than the corresponding png. Note, however, that gif and png images with sharp lines and edges may appear blurry after jpeg conversion.
  
	## Resize Images
	pagespeed EnableFilters resize_images;

	## This attempts to resize any image that is larger than the size called for by the width= and height= attributes on the <img> tag or an inline style= attribute. The original image is replaced only if the image file is smaller after resizing. Image resizing is lossy by nature, regardless of image file format.
	## Note: It also strips color profiles and metadata even if strip_image_color_profile and strip_image_meta_data are disabled.
	## Note: If both resize_images and resize_rendered_image_dimensions are enabled then resize_rendered_image_dimensions takes precedence.
	## Other available image optimizations
	## Some image recompression options are not included in rewrite_images, the group filter, and so must be enabled specifically. They are:
  
	## Convert JPEG to WEBP
	pagespeed EnableFilters convert_jpeg_to_webp;                            # Enabling convert_jpeg_to_webp causes the image optimizer to create webp images whenever it would otherwise attempt to serve jpegs (either because the original image is a jpeg or because convert_png_to_jpeg and possibly convert_gif_to_png were specified). The webp images are only served to modern browsers that support the format, and are lossy-encoded unless convert_to_webp_lossless is also specified. Optimized jpeg images will continue to be served to older browsers. Moreover, images that are originally gifs or pngs with transparent pixels will be converted to webps only if the browser supports webp transparency (libwebp version 0.2.0 and above); otherwise, optimized versions of the originals will be served in order to preserve the transparency information.

	## Convert to WEBP lossless
	## Note: new feature as of 1.3.25.1
	pagespeed EnableFilters convert_to_webp_lossless;                        # Enabling convert_to_webp_lossless causes the image optimizer to attempt to create lossless webp images whenever it encounters gifs or pngs. The lossless webp images are only served to modern browsers that support the format (libwebp version 0.2.0 and above). If the optimizer cannot convert to lossless webp or the browser does not support lossless webp, and convert_png_to_jpeg is specified, the image is converted to a lossy webp. Otherwise, or if that fails, the image is served as a png or gif, depending on the other options set. In any case, images that are originally jpegs will continue to be converted to lossy webps if convert_jpeg_to_webp is specified.
  
	## Insert Image Dimensions
	#pagespeed EnableFilters insert_image_dimensions;                         # This flag inserts width= and height= attributes into <img> tags that lack them and sets them to the image's width and height. Note that this can cause image stretching or shrinking if CSS rules specify only one image dimension (see Risks below).

	## Resize images to rendered dimensions
	## Note: new feature as of 1.7.30.1
	pagespeed EnableFilters resize_rendered_image_dimensions;                # This attempts to resize any image to its rendered dimensions on the web page. Unlike resize_images it ignores any width and height attributes specified for the image. If the same image appears more than once on the page it is resized to the biggest rendered dimensions of the image. Similar to resize_images, the original image is replaced only if the image file is smaller after resizing. Image resizing is lossy by nature, regardless of image file format.

	## Note: It also strips color profiles and metadata even if strip_image_color_profile and strip_image_meta_data are disabled.
	## By default resize_rendered_image_dimensions injects JavaScript that uses a beacon to report back the rendered dimensions of all the images. It takes a few accesses of a page for the data to be reported back and processed but eventually the rendered dimensions for all the images will be known and will be used for resizing the images.
	## The use of beacons can be disabled using the ModPagespeedCriticalImagesBeaconEnabled directive. If they are disabled, resize_rendered_image_dimensions will not apply.
	## Note: If both resize_rendered_image_dimensions and resize_images are enabled then resize_rendered_image_dimensions takes precedence.

	## Parameters that affect image optimization
	## ImageInlineMaxBytes
	#pagespeed ImageInlineMaxBytes MaxBytes;                                  # MaxBytes, a positive integer, is the maximum size in bytes of any image that will be inlined into an HTML file. The current default value for MaxBytes is 2048.


	## CssImageInlineMaxBytes
	#pagespeed CssImageInlineMaxBytes MaxBytes;                               # Here MaxBytes, a positive integer, is the maximum size in bytes of any image that will be inlined into CSS. For inline CSS in HTML files, the value used is the smaller of MaxBytes or ImageInlineMaxBytes. The current default value for MaxBytes is 3072. It has been made separately settable because external CSS resources are often cacheable and can be shared between multiple pages, increasing the benefit of a high inlining threshold compared to non-cacheable, non-shareable html files.

	## ImageResolutionLimitBytes
	## Note: new feature as of 1.7.30.1
	#pagespeed ImageResolutionLimitBytes MaxBytes;                            # Here MaxBytes, a positive integer, is the maximum size in bytes of an image that PageSpeed will try to optimize. By default the limit is 32 megabytes.

	## RecompressionQuality
	## Note: new feature as of 1.1.23.1
	#pagespeed ImageRecompressionQuality Quality;                             # This option sets the compression quality used when creating or re-compressing jpeg and webp images. 0 indicates lowest quality, 100 highest. -1 indicates lossless recompression. Before 1.6.29.3 the default value was -1, now it defaults to 85. Note that jpeg and webp images compressed with the same quality settings will look different in general due to differences between the compression algorithms used.

	## JpegRecompressionQuality
	#pagespeed JpegRecompressionQuality Quality;                              # This option sets the compression quality used when creating or re-compressing jpeg images, overriding any setting of ImageRecompressionQuality.

	## JpegRecompressionQualityForSmallScreens
	## Note: new feature as of 1.5.27.2
	#pagespeed JpegRecompressionQualityForSmallScreens Quality;               # This option sets the compression quality used when creating or re-compressing jpeg images that will be viewed on devices with small screens (such as mobile phones). This option overrides JpegRecompressionQuality when PageSpeed determines that the client has a screen with an area no greater than 1280 x 800 pixels. Before 1.6.29.3 the default behavior was to use JpegRecompressionQuality for all screen sizes, but now a lower quality of 70 is used by default. Generally, a lower image quality can be used for small screens.

	## JpegNumProgressiveScans
	## Note: new feature as of 1.5.27.2
	#pagespeed JpegNumProgressiveScans Scans;                                 # When convert_jpeg_to_progressive is enabled, images that are encoded as progressive JPEGs are first calculated to take ten scans to achieve the specified JPEG quality. This option, with values in the range [1,10], determines how many of those ten scans are included in the version of the image that is actually served to the client.

	## JpegNumProgressiveScansForSmallScreens
	## Note: new feature as of 1.5.27.2
	#pagespeed JpegNumProgressiveScansForSmallScreens Scans;                  # When convert_jpeg_to_progressive is enabled, images that are encoded as progressive JPEGs are first calculated to take ten scans to achieve the specified JPEG quality. This option, with values in the range [1,10], determines how many of those ten scans are included in the version of the image that is actually served to the client. This option is specific to images that will be viewed on devices with small screens (such as mobile phones). This option overrides JpegNumProgressiveScans when PageSpeed determines that the client has a screen with an area no greater than 1280 x 800 pixels. The default behavior is to use JpegNumProgressiveScans for all screen sizes. Generally, a lower number of scans can be used for small screens.

	## ProgressiveJpegMinBytes
	## Note: new feature as of 1.7.30.1
	#pagespeed ProgressiveJpegMinBytes min_bytes;                             # When convert_jpeg_to_progressive is enabled, it is applied to images whose compressed size is estimated to be 10k bytes or larger. Converting images smaller than 10k to progressive often makes them larger. Note: the origin image might be somewhat larger than 10k, but compressed size is estimated based on the origin image and the desired compression settings. Use this setting to change the progressive jpeg threshold:

	## WebpRecompressionQuality
	## Note: new feature as of 1.1.23.1
	#pagespeed WebpRecompressionQuality Quality;                              # This option sets the compression quality used when creating or re-compressing webp images, overriding any setting of ImageRecompressionQuality.

	## WebpRecompressionQualityForSmallScreens
	## Note: new feature as of 1.5.27.2
	#pagespeed WebpRecompressionQualityForSmallScreens Quality;               # This option sets the compression quality used when creating or re-compressing webp images that will be viewed on devices with small screens (such as mobile phones). This option overrides WebpRecompressionQuality when PageSpeed determines that the client has a screen with an area no greater than 1280 x 800 pixels. Before 1.6.29.3 the default behavior was to use WebpRecompressionQuality for all screen sizes, but now a lower quality of 70 is used by default. Generally, a lower image quality can be used for small screens.
  
	## ImageLimitOptimizedPercent
	#pagespeed ImageLimitOptimizedPercent Percent;                            # The image optimizer keeps only optimized images whose size after recompression is less than the given percent of the original image size. For example, setting this to 95 will retain an optimized image only if it is at least 5% smaller than the original image it would replace. The default setting is 100, meaning any savings at all will cause the optimized image to be used. Do not set this to 0 to disable image optimization; disable recompress_images instead, or recompress_jpeg, recompress_png and recompress_webp for respective image formats.

	## ImageLimitResizeAreaPercent
	#pagespeed ImageLimitResizeAreaPercent Percent;                           # Only attempt to resize images whose area in pixels after optimization will be less than the given percent of the original image area. For example, setting this to 90 will only resize images if the image area shrinks by at least 10%. The default setting is 100, meaning any shrinkage at all will cause an image to be resized. Do not set this to 0 to disable image resizing; disable resize_images instead.

	## ImageMaxRewritesAtOnce
	#pagespeed ImageMaxRewritesAtOnce NumImages;                              # This parameter limits the number of images being recompressed or resized at one time to NumImages. Because image optimization may be CPU-intensive it may be desirable to limit it to reduce the load on your server, especially at startup. Once optimized, images are cached until they expire. If an image cannot be optimized, this is remembered until expiration as well. When this parameter is not specified the current default value for NumImages is 8. Setting NumImages to 0 allows any number of images to be rewritten at once. If you wish to disable image optimization, you should instead disable resize_images and recompress_images, or its sub-parts recompress_jpeg, recompress_png and recompress_webp.
  

# Expire rules for static content

# cache.appcache, your document html and data
location ~* \.(?:manifest|appcache|html?|xml|json)$ {
  expires -1;
  # access_log logs/static.log; # I don't usually include a static log
}

# Feed
location ~* \.(?:rss|atom)$ {
  expires 1h;
  add_header Cache-Control "public";
}

# Media: images, icons, video, audio, HTC
location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
  expires 1M;
  access_log off;
  add_header Cache-Control "public";
}

# CSS and Javascript
location ~* \.(?:css|js)$ {
  expires 1y;
  access_log off;
  add_header Cache-Control "public";
}


	pagespeed Statistics on;
pagespeed StatisticsLogging on;
pagespeed LogDir /var/log/pagespeed;
	


	# Ensure requests for pagespeed optimized resources go to the pagespeed handler
	# and no extraneous headers get set.
	location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
	  add_header "" "";
	}
	location ~ "^/pagespeed_static/" { }
	location ~ "^/ngx_pagespeed_beacon$" { }

	location /ngx_pagespeed_statistics { allow 127.0.0.1; deny all; }
	location /ngx_pagespeed_global_statistics { allow 127.0.0.1; deny all; }
	location /ngx_pagespeed_message { allow 127.0.0.1; deny all; }
	location /pagespeed_console { allow 127.0.0.1; deny all; }
	location ~ ^/pagespeed_admin { allow all; }
	location ~ ^/pagespeed_global_admin { allow 127.0.0.1; deny all; }
        location / {
            
	autoindex on;
        }
pagespeed StatisticsPath /ngx_pagespeed_statistics;

pagespeed MessagesPath /ngx_pagespeed_message;
pagespeed ConsolePath /pagespeed_console;
pagespeed AdminPath /pagespeed_admin;


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        autoindex on;
    #    }
    #}


    # HTTPS server
    #
    #server {
      #  listen       443 ssl spdy;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
